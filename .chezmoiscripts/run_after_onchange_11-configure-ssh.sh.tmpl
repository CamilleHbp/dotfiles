#!/bin/sh

# ---------------------------------------------------------------------------- #
#                          Unofficial Bash Strict Mode                         #
# ---------------------------------------------------------------------------- #
# See http://redsymbol.net/articles/unofficial-bash-strict-mode/
# -e: exit on error
# -u: exit on unset variables
# -o pipefail: prevents errors in a pipeline from being masked 
set -euo pipefail
# IFS (Internal Field Separator): controls what Bash calls word splitting.
# When set to a string, each character in the string is considered by Bash to separate words
IFS=$'\n\t'

# ---------------------------------------------------------------------------- #
#                                     Logs                                     #
# ---------------------------------------------------------------------------- #
log_color() {
    wait
    color_code="$1"
    shift
    printf "\033[${color_code}m%s\033[0m\n" "$*" >&2
}
# -------------------------------- Log colours ------------------------------- #
log_blue() { log_color "0;34" "$@" ; }
log_green() { log_color "0;32" "$@" ; }
log_orange() { log_color "0;33" "$@" ; }
log_red() { log_color "0;31" "$@" ; }
# --------------------------------- Log state -------------------------------- #
log_error() { log_red "❌ $@" ; }
log_success() { log_green "✅ $@" ; }
log_task() { log_blue "🔃 $@" ; }
log_warning() { log_orange "⚠️ $@" ; }
# ---------------------------- Log exit functions ---------------------------- #
error() { log_error "$@" ; exit 1 ; }
success() { log_success "$@" ; exit 0 ; }

# ---------------------------------------------------------------------------- #
#                                    Script                                    #
# ---------------------------------------------------------------------------- #
log_task "[SSH] SETUP"

# ------------------ Exit if this is not a personal machine ------------------ #
{{- if not .personal -}}
    return 0
{{- end -}}

# --------------------- Copy ssh keys to the user folder --------------------- #
log_task "[SSH] Copying SSH keys"
mkdir -p ~/.ssh
if [ ! -f "id_ed25519" ]; then
    {{ with $private_key := (onepasswordDetailsFields "w3rasa7gfmsvb6vkxvufledjny").private_key.value }}
        touch ~/.ssh/id_ed25519 && chmod 0600 ~/.ssh/id_ed25519
        echo {{ $private_key | quote }} >> ~/.ssh/id_ed25519
    {{ end }}
fi
if [ ! -f "id_ed25519.pub" ]; then
    {{ with $public_key := (onepasswordDetailsFields "w3rasa7gfmsvb6vkxvufledjny").public_key.value }}
        touch ~/.ssh/id_ed25519.pub && chmod 0644 ~/.ssh/id_ed25519.pub
        echo {{ $public_key | quote }} >> ~/.ssh/id_ed25519.pub
    {{ end }}
fi
if [ ! -f "id_ed25519_elbowarrior" ]; then
    {{ with $elbo_private_key := (onepasswordDetailsFields "l6nqfvclhwzs3432g3x4ppjrti").private_key.value }}
        touch ~/.ssh/id_ed25519_elbowarrior && chmod 0600 ~/.ssh/id_ed25519_elbowarrior
        echo {{ $elbo_private_key | quote }} >> ~/.ssh/id_ed25519_elbowarrior
    {{ end }}
fi
if [ ! -f "id_ed25519_elbowarrior.pub" ]; then
    {{ with $elbo_public_key := (onepasswordDetailsFields "l6nqfvclhwzs3432g3x4ppjrti").public_key.value }}
        touch ~/.ssh/id_ed25519_elbowarrior.pub && chmod 0644 ~/.ssh/id_ed25519_elbowarrior.pub
        echo {{ $elbo_public_key | quote }} >> ~/.ssh/id_ed25519_elbowarrior.pub
    {{end}}
fi
log_success "[SSH] SSH keys copied"

# ------------------------- Add ssh keys to ssh-agent ------------------------ #
log_task "[SSH] Add SSH keys to ssh-agent"
eval "$(ssh-agent)"
ssh-add ~/.ssh/id_ed25519
ssh-add ~/.ssh/id_ed25519_elbowarrior
log_success "[SSH] SSH keys added to ssh-agent"

log_success "[SSH] DONE"
